// This file is generated by bundling the application's source code.
// It is the result of running the 'npm run build' command.
// Do not edit this file directly, as your changes will be overwritten.

import React, { useState, useCallback, useEffect, useMemo, useRef } from 'react';
import ReactDOM from 'react-dom/client';
import { GoogleGenAI, Type } from '@google/genai';

// --- From types.ts ---
var GameState = /* @__PURE__ */ ((GameState2) => {
  GameState2[GameState2["HOME"] = 0] = "HOME";
  GameState2[GameState2["THEME_SELECTION"] = 1] = "THEME_SELECTION";
  GameState2[GameState2["PLAYING"] = 2] = "PLAYING";
  return GameState2;
})(GameState || {});

// --- From services/geminiService.ts ---
class ApiKeyError extends Error {
  constructor(message) {
    super(message);
    this.name = "ApiKeyError";
  }
}
var isApiKeyError = (error) => {
  if (error instanceof Error) {
    const message = error.message;
    return message.includes("API key not valid") || message.includes("permission denied") || message.includes("400 Bad Request");
  }
  return false;
};
var systemInstruction = `你是一位專為互動式文字冒險遊戲設計的故事大師。你的目標是創造身歷其境、引人入勝且連貫的場景。

**核心職責：**
1.  **生成場景**：根據使用者選擇的主題和後續的選擇，生成新場景的生動描述（約 2-3 個段落）。
2.  **提供選項**：提供 3 到 4 個不同且可操作的選項供玩家選擇。
3.  **管理玩家狀態**：
    *   **屬性系統**：玩家有五個核心屬性。你必須根據這些屬性來塑造故事和選項，並在故事進展中更新它們。
        *   **生命值 (Health)**: 範圍 0-100。代表玩家的生命力。降至 0 通常意味著遊戲結束。初始值為 100。
        *   **力量 (Strength)**: 範圍 1-20。代表玩家的物理力量。影響舉重、戰鬥、破壞等。
        *   **敏捷 (Agility)**: 範圍 1-20。代表玩家的靈巧、速度和反應。影響閃避、潛行、精細操作等。
        *   **體質 (Constitution)**: 範圍 1-20。代表玩家的耐力和抵抗力。影響對毒藥、疾病和惡劣環境的抵抗能力。
        *   **精神 (Spirit)**: 範圍 1-20。代表玩家的意志力、專注力和心靈韌性。影響抵抗心靈攻擊、解謎、保持冷靜等。
    *   **屬性等級參考**：1=嬰兒，8=正常成年人，12=頂級運動員，16=超人，20=神。玩家初始時各項非生命值屬性為 8。
    *   **動態更新**：根據玩家的選擇和故事進展，動態更新玩家的屬性或物品欄。例如，如果玩家撿起一把鑰匙，你必須在 \`playerStateUpdate.addItems\` 中新增它。如果玩家受傷，你必須在 \`playerStateUpdate.setAttributes\` 中更新生命值。一次艱苦的攀爬可能會暫時降低體質，或成功後永久增加力量。
    *   **狀態感知**：你的故事和選項必須反映玩家的當前狀態。如果玩家物品欄裡有繩子，你可以提供一個使用繩子的選項。如果玩家力量高，可以提供一個蠻力選項。如果玩家生命值低，場景描述應該反映出他們的虛弱。
4.  **控制遊戲流程**：故事應是動態的，可以導向各種结局。當故事結束時（例如生命值降為 0），將 \`isGameOver\` 設為 true 並提供结局訊息。

**回應格式：**
你必須始終以指定的 JSON 格式回應。所有生成的故事、選項和訊息都必須使用**繁體中文**。`;
var responseSchema = {
  type: Type.OBJECT,
  properties: {
    sceneDescription: {
      type: Type.STRING,
      description: "對當前場景及玩家上一個選擇結果的詳細、引人入勝的描述。這應該有 2-3 個段落長。必須使用繁體中文。"
    },
    choices: {
      type: Type.ARRAY,
      description: "一個包含 3 到 4 個不同選項的陣列供玩家選擇。如果遊戲結束，此陣列應為空。所有選項都必須使用繁體中文。",
      items: {
        type: Type.OBJECT,
        properties: {
          text: {
            type: Type.STRING,
            description: "呈現給玩家的選項文字。"
          }
        },
        required: ["text"]
      }
    },
    isGameOver: {
      type: Type.BOOLEAN,
      description: "一個布林值，表示遊戲是否已達到結局或遊戲結束狀態。"
    },
    gameOverMessage: {
      type: Type.STRING,
      description: "如果 isGameOver 為 true，則顯示一條結束訊息。這可以是勝利或失敗的訊息。必須使用繁體中文。"
    },
    playerStateUpdate: {
      type: Type.OBJECT,
      description: "一個包含對玩家狀態更新的物件。這是可選的，只有在需要改變玩家屬性或物品時才包含此欄位。",
      properties: {
        addItems: {
          type: Type.ARRAY,
          description: "要添加到玩家物品欄中的物品陣列。",
          items: {
            type: Type.OBJECT,
            properties: {
              name: { type: Type.STRING, description: "物品名稱。" },
              description: { type: Type.STRING, description: "物品的簡短描述。" }
            },
            required: ["name", "description"]
          }
        },
        removeItems: {
          type: Type.ARRAY,
          description: "要從玩家物品欄中移除的物品名稱陣列。",
          items: { type: Type.STRING }
        },
        setAttributes: {
          type: Type.ARRAY,
          description: '要更新或設定的玩家屬性陣列。例如：`[{"key": "生命值", "value": "80"}, {"key": "狀態", "value": "良好"}]`。',
          items: {
            type: Type.OBJECT,
            properties: {
              key: { type: Type.STRING, description: "屬性名稱。" },
              value: { type: Type.STRING, description: "屬性值（以字串形式）。" }
            },
            required: ["key", "value"]
          }
        }
      }
    }
  },
  required: ["sceneDescription", "choices", "isGameOver"]
};
function constructPrompt(history, playerState) {
  const historyText = history.map((step) => {
    if (step.type === "scene")
      return `場景：${step.content}`;
    if (step.type === "choice")
      return `玩家選擇了：「${step.content}」`;
    if (step.type === "theme")
      return `開始一個新冒險，主題是：「${step.content}」。`;
    return "";
  }).join("\n\n");
  let stateText = "玩家目前沒有任何狀態。這是冒險的開始。";
  if (playerState) {
    const attributes = Object.entries(playerState.attributes).map(([key, value]) => `${key}: ${value}`).join(", ");
    const inventory = playerState.inventory.length > 0 ? playerState.inventory.map((item) => item.name).join(", ") : "空的";
    stateText = `玩家當前狀態：
- 屬性：${attributes}
- 物品欄：${inventory}`;
  }
  return `根據這段歷史和玩家當前狀態繼續冒險：

**遊戲歷史**
${historyText}

**${stateText}**

生成下一步。`;
}
var validateApiKey = async (apiKey) => {
  const url = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash?key=${apiKey}`;
  try {
    const response = await fetch(url);
    if (response.ok) {
      return true;
    } else {
      const errorData = await response.json().catch(() => ({ message: response.statusText }));
      console.error(`API Key validation failed with status ${response.status}:`, errorData);
      return false;
    }
  } catch (error) {
    console.error("API Key validation request failed due to a network or fetch error:", error);
    return false;
  }
};
var generateAdventureStep = async (history, playerState, apiKey) => {
  try {
    const ai = new GoogleGenAI({ apiKey });
    const prompt = constructPrompt(history, playerState);
    const response = await ai.models.generateContent({
      model: "gemini-2.5-flash",
      contents: prompt,
      config: {
        systemInstruction,
        responseMimeType: "application/json",
        responseSchema,
        temperature: 0.8,
        topP: 0.95
      }
    });
    const jsonText = response.text.trim();
    if (!jsonText) {
      console.error("Gemini 回應為空:", response);
      throw new Error("說書人沒有回應。可能是內容被過濾。");
    }
    const parsedResponse = JSON.parse(jsonText);
    return parsedResponse;
  } catch (error) {
    console.error("generateAdventureStep 失敗:", error);
    if (isApiKeyError(error)) {
      throw new ApiKeyError("API 金鑰無效或已過期。");
    }
    const message = error instanceof Error ? error.message : String(error);
    throw new Error(`與說書人的通訊出現問題: ${message}`);
  }
};

// --- From services/storageService.ts ---
var SAVE_GAME_KEY_PREFIX = "gemini-text-adventure-save-";
var MAX_SAVE_SLOTS = 4;
var saveGame = (saveData, slotIndex) => {
  if (slotIndex < 0 || slotIndex >= MAX_SAVE_SLOTS) {
    console.error(`無效的存檔欄位索引: ${slotIndex}`);
    return;
  }
  try {
    const data = JSON.stringify(saveData);
    localStorage.setItem(`${SAVE_GAME_KEY_PREFIX}${slotIndex}`, data);
  } catch (error) {
    console.error("無法儲存遊戲進度:", error);
  }
};
var loadGame = (slotIndex) => {
  if (slotIndex < 0 || slotIndex >= MAX_SAVE_SLOTS) {
    console.error(`無效的存檔欄位索引: ${slotIndex}`);
    return null;
  }
  try {
    const data = localStorage.getItem(`${SAVE_GAME_KEY_PREFIX}${slotIndex}`);
    if (data === null) {
      return null;
    }
    return JSON.parse(data);
  } catch (error) {
    console.error("無法讀取遊戲進度:", error);
    return null;
  }
};
var clearSave = (slotIndex) => {
  if (slotIndex < 0 || slotIndex >= MAX_SAVE_SLOTS) {
    console.error(`無效的存檔欄位索引: ${slotIndex}`);
    return;
  }
  try {
    localStorage.removeItem(`${SAVE_GAME_KEY_PREFIX}${slotIndex}`);
  } catch (error) {
    console.error("無法清除遊戲存檔:", error);
  }
};
var getAllSaves = () => {
  const saves = [];
  for (let i = 0; i < MAX_SAVE_SLOTS; i++) {
    saves.push(loadGame(i));
  }
  return saves;
};

// --- From components/LoadingIcon.tsx ---
var LoadingIcon = () => /* @__PURE__ */ React.createElement("svg", {
  className: "animate-spin -ml-1 mr-3 h-5 w-5 text-white",
  xmlns: "http://www.w3.org/2000/svg",
  fill: "none",
  viewBox: "0 0 24 24"
}, /* @__PURE__ */ React.createElement("circle", {
  className: "opacity-25",
  cx: "12",
  cy: "12",
  r: "10",
  stroke: "currentColor",
  strokeWidth: "4"
}), /* @__PURE__ */ React.createElement("path", {
  className: "opacity-75",
  fill: "currentColor",
  d: "M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
}));

// --- From components/ThemeSelector.tsx ---
var classicThemes = [
  "一座下著酸雨的賽博龐克城市",
  "火星上最後的人類殖民地",
  "一片充滿發光蘑菇的神秘森林",
  "1940 年代紐約的黑色偵探故事",
  "在荒涼的熱帶島嶼上求生",
  "一艘探索未知星系的深空太空船"
];
var ThemeSelector = ({ onStart, isLoading }) => {
  const [theme, setTheme] = useState("");
  const [placeholder, setPlaceholder] = useState("一棟鬧鬼的維多利亞式豪宅...");
  const placeholders = [
    "一座下著酸雨的賽博龐克城市...",
    "火星上最後的人類殖民地...",
    "一片充滿發光蘑菇的神秘森林...",
    "1940 年代紐約的黑色偵探故事...",
    "在荒涼的熱帶島嶼上求生..."
  ];
  const handleSubmit = (e) => {
    e.preventDefault();
    if (theme.trim() && !isLoading) {
      onStart(theme.trim());
    } else if (!theme.trim() && !isLoading) {
      onStart(placeholder);
    }
  };
  const handlePlaceholderClick = () => {
    const randomPlaceholder = placeholders[Math.floor(Math.random() * placeholders.length)];
    setPlaceholder(randomPlaceholder);
  };
  return /* @__PURE__ */ React.createElement("div", {
    className: "bg-slate-800/50 p-8 rounded-lg shadow-2xl border border-slate-700 animate-fade-in-up backdrop-blur-sm"
  }, /* @__PURE__ */ React.createElement("h2", {
    className: "text-2xl font-semibold text-cyan-300 mb-4 text-center"
  }, "描述你的冒險"), /* @__PURE__ */ React.createElement("p", {
    className: "text-slate-400 mb-6 text-center"
  }, "自由發揮你的想像力，或從下方的經典主題中選擇。"), /* @__PURE__ */ React.createElement("form", {
    onSubmit: handleSubmit
  }, /* @__PURE__ */ React.createElement("input", {
    type: "text",
    value: theme,
    onChange: (e) => setTheme(e.target.value),
    placeholder,
    className: "w-full bg-slate-900 border border-slate-600 rounded-md p-3 text-lg text-slate-200 focus:ring-2 focus:ring-cyan-500 focus:outline-none transition duration-300 placeholder-slate-500",
    disabled: isLoading
  }), /* @__PURE__ */ React.createElement("p", {
    className: "text-xs text-slate-500 text-center mt-2"
  }, "不知道玩什麼？ ", /* @__PURE__ */ React.createElement("button", {
    type: "button",
    onClick: handlePlaceholderClick,
    className: "underline hover:text-cyan-400"
  }, "來點靈感")), /* @__PURE__ */ React.createElement("div", {
    className: "mt-6 text-center"
  }, /* @__PURE__ */ React.createElement("button", {
    type: "submit",
    disabled: isLoading,
    className: "bg-cyan-600 text-white font-bold py-3 px-8 rounded-lg hover:bg-cyan-500 disabled:bg-slate-600 disabled:cursor-not-allowed transition-all duration-300 transform hover:scale-105 active:scale-95 shadow-lg w-full md:w-auto flex items-center justify-center mx-auto"
  }, isLoading && theme ? /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement(LoadingIcon, null), "構築世界中...") : "用這個主題開始"))), /* @__PURE__ */ React.createElement("div", {
    className: "my-8 flex items-center",
    "aria-hidden": "true"
  }, /* @__PURE__ */ React.createElement("hr", {
    className: "flex-grow border-t border-slate-600"
  }), /* @__PURE__ */ React.createElement("span", {
    className: "mx-4 text-slate-400 text-sm"
  }, "或"), /* @__PURE__ */ React.createElement("hr", {
    className: "flex-grow border-t border-slate-600"
  })), /* @__PURE__ */ React.createElement("div", null, /* @__PURE__ */ React.createElement("h3", {
    className: "text-xl font-semibold text-cyan-300 mb-4 text-center"
  }, "從經典主題中選擇"), /* @__PURE__ */ React.createElement("div", {
    className: "grid grid-cols-1 md:grid-cols-2 gap-4"
  }, classicThemes.map((classicTheme, index) => /* @__PURE__ */ React.createElement("button", {
    key: index,
    onClick: () => onStart(classicTheme),
    disabled: isLoading,
    className: "text-left bg-slate-700/70 p-4 rounded-lg border border-slate-600 hover:bg-cyan-800/50 hover:border-cyan-600 transition-all duration-300 focus:outline-none focus:ring-2 focus:ring-cyan-500 disabled:opacity-50 disabled:cursor-not-allowed transform hover:-translate-y-1 active:scale-95 flex items-center justify-between"
  }, /* @__PURE__ */ React.createElement("span", null, classicTheme), isLoading ? /* @__PURE__ */ React.createElement(LoadingIcon, null) : /* @__PURE__ */ React.createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    className: "h-5 w-5",
    viewBox: "0 0 20 20",
    fill: "currentColor"
  }, /* @__PURE__ */ React.createElement("path", {
    fillRule: "evenodd",
    d: "M10.293 3.293a1 1 0 011.414 0l6 6a1 1 0 010 1.414l-6 6a1 1 0 01-1.414-1.414L14.586 11H3a1 1 0 110-2h11.586l-4.293-4.293a1 1 0 010-1.414z",
    clipRule: "evenodd"
  })))))));
};

// --- From components/Typewriter.tsx ---
var Typewriter = ({ text, speed = 25, onComplete, onUpdate }) => {
  const [displayedText, setDisplayedText] = useState("");
  const [currentIndex, setCurrentIndex] = useState(0);
  useEffect(() => {
    setDisplayedText("");
    setCurrentIndex(0);
  }, [text]);
  useEffect(() => {
    if (currentIndex < text.length) {
      const timeout = setTimeout(() => {
        setDisplayedText((prev) => prev + text[currentIndex]);
        setCurrentIndex((prev) => prev + 1);
      }, speed);
      return () => clearTimeout(timeout);
    } else if (onComplete) {
      onComplete();
    }
  }, [currentIndex, text, speed, onComplete]);
  useEffect(() => {
    if (onUpdate) {
      onUpdate();
    }
  }, [displayedText, onUpdate]);
  return /* @__PURE__ */ React.createElement("span", null, displayedText);
};

// --- From components/StoryLog.tsx ---
var StoryLog = ({ storyLog, onTypingComplete }) => {
  const scrollableContainerRef = useRef(null);
  const scrollToBottom = () => {
    if (scrollableContainerRef.current) {
      scrollableContainerRef.current.scrollTop = scrollableContainerRef.current.scrollHeight;
    }
  };
  useEffect(() => {
    scrollToBottom();
  }, [storyLog]);
  return /* @__PURE__ */ React.createElement("div", {
    ref: scrollableContainerRef,
    className: "space-y-6 max-h-[50vh] overflow-y-auto pr-4 -mr-4",
    style: { scrollBehavior: "smooth" }
  }, storyLog.map((step, index) => {
    const isLastStep = index === storyLog.length - 1;
    if (step.type === "scene") {
      return /* @__PURE__ */ React.createElement("div", {
        key: index,
        className: "text-slate-300 text-lg leading-relaxed whitespace-pre-wrap"
      }, isLastStep ? /* @__PURE__ */ React.createElement(Typewriter, {
        text: step.content,
        onComplete: onTypingComplete,
        onUpdate: scrollToBottom
      }) : step.content);
    }
    if (step.type === "choice") {
      return /* @__PURE__ */ React.createElement(React.Fragment, {
        key: index
      }, /* @__PURE__ */ React.createElement("div", {
        className: "text-right animate-fade-in"
      }, /* @__PURE__ */ React.createElement("p", {
        className: "inline-block bg-cyan-900/50 text-cyan-200 italic px-4 py-2 rounded-lg border border-cyan-800"
      }, "> ", step.content)), /* @__PURE__ */ React.createElement("hr", {
        className: "thematic-divider"
      }));
    }
    return null;
  }));
};

// --- From components/PlayerStatus.tsx ---
var PlayerStatus = ({ playerState }) => {
  return /* @__PURE__ */ React.createElement("div", {
    className: "bg-slate-800/50 p-6 rounded-lg shadow-2xl border border-slate-700 backdrop-blur-sm sticky top-8"
  }, /* @__PURE__ */ React.createElement("h3", {
    className: "text-xl font-bold text-cyan-300 mb-4 border-b border-slate-600 pb-2"
  }, "人物狀態"), playerState ? /* @__PURE__ */ React.createElement("div", {
    className: "space-y-4"
  }, /* @__PURE__ */ React.createElement("div", null, /* @__PURE__ */ React.createElement("h4", {
    className: "text-lg font-semibold text-slate-300 mb-2"
  }, "屬性"), /* @__PURE__ */ React.createElement("ul", {
    className: "space-y-1 text-slate-400"
  }, Object.entries(playerState.attributes).map(([key, value]) => /* @__PURE__ */ React.createElement("li", {
    key,
    className: "flex justify-between"
  }, /* @__PURE__ */ React.createElement("span", null, key, ":"), /* @__PURE__ */ React.createElement("span", {
    className: "font-mono font-bold text-cyan-400"
  }, value))))), /* @__PURE__ */ React.createElement("hr", {
    className: "thematic-divider"
  }), /* @__PURE__ */ React.createElement("div", null, /* @__PURE__ */ React.createElement("h4", {
    className: "text-lg font-semibold text-slate-300 mb-2"
  }, "物品欄"), playerState.inventory.length > 0 ? /* @__PURE__ */ React.createElement("ul", {
    className: "space-y-2 text-slate-400"
  }, playerState.inventory.map((item) => /* @__PURE__ */ React.createElement("li", {
    key: item.name,
    className: "group relative"
  }, /* @__PURE__ */ React.createElement("span", {
    className: "font-semibold"
  }, item.name), /* @__PURE__ */ React.createElement("div", {
    className: "absolute left-0 bottom-full mb-2 w-full max-w-xs p-2 text-sm bg-slate-900 text-slate-300 rounded-md shadow-lg opacity-0 group-hover:opacity-100 transition-opacity duration-300 pointer-events-none z-10 border border-slate-700"
  }, item.description)))) : /* @__PURE__ */ React.createElement("p", {
    className: "text-slate-500 italic"
  }, "你的口袋空空如也。"))) : /* @__PURE__ */ React.createElement("p", {
    className: "text-slate-500 italic"
  }, "正在等待冒險的召喚..."));
};

// --- From components/GameScreen.tsx ---
var GameScreen = ({
  storyLog,
  choices,
  playerState,
  isLoading,
  isGameOver,
  gameOverMessage,
  error,
  onMakeChoice,
  onRestart,
  onOpenHistory
}) => {
  const [isTyping, setIsTyping] = useState(true);
  useEffect(() => {
    if (!isLoading && storyLog.length > 0 && storyLog[storyLog.length - 1].type === "scene") {
      setIsTyping(true);
    }
  }, [isLoading, storyLog]);
  const handleTypingComplete = () => {
    setIsTyping(false);
  };
  const displayLog = useMemo(() => {
    if (!storyLog || storyLog.length === 0) {
      return [];
    }
    const lastStep = storyLog[storyLog.length - 1];
    if (storyLog.length > 1 && storyLog[storyLog.length - 2].type === "choice") {
      return [storyLog[storyLog.length - 2], lastStep];
    }
    return [lastStep];
  }, [storyLog]);
  return /* @__PURE__ */ React.createElement("div", {
    className: "grid grid-cols-1 md:grid-cols-3 md:gap-8 animate-fade-in"
  }, /* @__PURE__ */ React.createElement("div", {
    className: "md:col-span-2 bg-slate-800/50 p-6 md:p-8 rounded-lg shadow-2xl border border-slate-700 backdrop-blur-sm mb-6 md:mb-0"
  }, /* @__PURE__ */ React.createElement(StoryLog, {
    storyLog: displayLog,
    onTypingComplete: handleTypingComplete
  }), error && /* @__PURE__ */ React.createElement("div", {
    className: "my-4 p-4 bg-red-900/50 border border-red-700 rounded-md text-red-300 text-center"
  }, /* @__PURE__ */ React.createElement("p", {
    className: "font-semibold"
  }, "發生錯誤"), /* @__PURE__ */ React.createElement("p", null, error)), isLoading && !isGameOver && /* @__PURE__ */ React.createElement("div", {
    className: "flex items-center justify-center text-slate-400 my-4 p-4 text-lg"
  }, /* @__PURE__ */ React.createElement(LoadingIcon, null), /* @__PURE__ */ React.createElement("span", {
    className: "ml-3"
  }, "說書人正在思考...")), !isLoading && !isGameOver && !isTyping && /* @__PURE__ */ React.createElement("div", {
    className: "mt-6 animate-fade-in"
  }, /* @__PURE__ */ React.createElement("h3", {
    className: "text-xl text-cyan-300 font-semibold mb-4 text-center"
  }, "你接下來要做什麼？"), /* @__PURE__ */ React.createElement("div", {
    className: "grid grid-cols-1 gap-4"
  }, choices.map((choice, index) => /* @__PURE__ */ React.createElement("button", {
    key: index,
    onClick: () => onMakeChoice(choice.text),
    className: "w-full text-left bg-slate-700/70 p-4 rounded-lg border border-slate-600 hover:bg-cyan-800/50 hover:border-cyan-600 transition-all duration-300 focus:outline-none focus:ring-2 focus:ring-cyan-500 disabled:opacity-50 transform hover:-translate-y-1 active:scale-95",
    disabled: isLoading
  }, choice.text)))), isGameOver && /* @__PURE__ */ React.createElement("div", {
    className: "text-center my-6 animate-fade-in"
  }, /* @__PURE__ */ React.createElement("p", {
    className: "text-2xl text-cyan-400 font-bold mb-4"
  }, gameOverMessage), /* @__PURE__ */ React.createElement("button", {
    onClick: onRestart,
    className: "bg-cyan-600 text-white font-bold py-3 px-8 rounded-lg hover:bg-cyan-500 transition-all duration-300 transform hover:scale-105 active:scale-95 shadow-lg"
  }, "開啟新冒險"))), /* @__PURE__ */ React.createElement("div", {
    className: "md:col-span-1"
  }, /* @__PURE__ */ React.createElement(PlayerStatus, {
    playerState
  }), /* @__PURE__ */ React.createElement("div", {
    className: "mt-6"
  }, /* @__PURE__ */ React.createElement("button", {
    onClick: onOpenHistory,
    className: "w-full bg-slate-700/70 text-slate-300 font-bold py-3 px-6 rounded-lg hover:bg-slate-600/70 transition-all duration-300 shadow-lg"
  }, "查看冒險日誌"))));
};

// --- From components/HistoryModal.tsx ---
var HistoryModal = ({ isOpen, onClose, storyLog }) => {
  const modalContentRef = useRef(null);
  useEffect(() => {
    if (isOpen) {
      setTimeout(() => {
        var _a;
        (_a = modalContentRef.current) == null ? void 0 : _a.scrollTo(0, modalContentRef.current.scrollHeight);
      }, 100);
    }
  }, [isOpen]);
  if (!isOpen) {
    return null;
  }
  return /* @__PURE__ */ React.createElement("div", {
    className: "fixed inset-0 bg-black bg-opacity-70 z-50 flex items-center justify-center p-4 animate-fade-in-fast",
    onClick: onClose
  }, /* @__PURE__ */ React.createElement("div", {
    className: "bg-slate-800 w-full max-w-2xl max-h-[80vh] rounded-lg shadow-2xl border border-slate-700 flex flex-col",
    onClick: (e) => e.stopPropagation()
  }, /* @__PURE__ */ React.createElement("header", {
    className: "p-4 border-b border-slate-600 flex justify-between items-center sticky top-0 bg-slate-800"
  }, /* @__PURE__ */ React.createElement("h2", {
    className: "text-2xl font-bold text-cyan-300"
  }, "冒險日誌"), /* @__PURE__ */ React.createElement("button", {
    onClick: onClose,
    className: "text-slate-400 hover:text-white transition-colors"
  }, /* @__PURE__ */ React.createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    className: "h-6 w-6",
    fill: "none",
    viewBox: "0 0 24 24",
    stroke: "currentColor"
  }, /* @__PURE__ */ React.createElement("path", {
    strokeLinecap: "round",
    strokeLinejoin: "round",
    strokeWidth: 2,
    d: "M6 18L18 6M6 6l12 12"
  })))), /* @__PURE__ */ React.createElement("div", {
    ref: modalContentRef,
    className: "p-6 overflow-y-auto space-y-6"
  }, storyLog.map((step, index) => {
    if (step.type === "scene") {
      return /* @__PURE__ */ React.createElement("div", {
        key: index,
        className: "text-slate-300 text-lg leading-relaxed whitespace-pre-wrap"
      }, step.content);
    }
    if (step.type === "choice") {
      return /* @__PURE__ */ React.createElement(React.Fragment, {
        key: index
      }, /* @__PURE__ */ React.createElement("div", {
        className: "text-right"
      }, /* @__PURE__ */ React.createElement("p", {
        className: "inline-block bg-cyan-900/50 text-cyan-200 italic px-4 py-2 rounded-lg border border-cyan-800"
      }, "> ", step.content)), /* @__PURE__ */ React.createElement("hr", {
        className: "thematic-divider"
      }));
    }
    return null;
  }))));
};

// --- From components/ApiKeyInput.tsx ---
var ApiKeyInput = ({ onKeySubmit, isVerifying, error }) => {
  const [key, setKey] = useState("");
  const handleSubmit = (e) => {
    e.preventDefault();
    if (key.trim() && !isVerifying) {
      onKeySubmit(key.trim());
    }
  };
  return /* @__PURE__ */ React.createElement("div", {
    className: "bg-slate-800/50 p-8 rounded-lg shadow-2xl border border-slate-700 animate-fade-in-up backdrop-blur-sm"
  }, /* @__PURE__ */ React.createElement("h2", {
    className: "text-2xl font-semibold text-cyan-300 mb-4 text-center"
  }, "輸入您的 API 金鑰"), /* @__PURE__ */ React.createElement("p", {
    className: "text-slate-400 mb-6 text-center"
  }, "要遊玩此遊戲，您需要一個 Google AI API 金鑰。您可以從 ", /* @__PURE__ */ React.createElement("a", {
    href: "https://aistudio.google.com/app/apikey",
    target: "_blank",
    rel: "noopener noreferrer",
    className: "text-cyan-400 underline hover:text-cyan-300"
  }, "Google AI Studio"), " 免費取得。"), error && /* @__PURE__ */ React.createElement("div", {
    className: "my-4 p-3 bg-red-900/50 border border-red-700 rounded-md text-red-300 text-center"
  }, /* @__PURE__ */ React.createElement("p", null, error)), /* @__PURE__ */ React.createElement("form", {
    onSubmit: handleSubmit
  }, /* @__PURE__ */ React.createElement("input", {
    type: "password",
    value: key,
    onChange: (e) => setKey(e.target.value),
    placeholder: "請在此貼上您的 API 金鑰",
    className: "w-full bg-slate-900 border border-slate-600 rounded-md p-3 text-lg text-slate-200 focus:ring-2 focus:ring-cyan-500 focus:outline-none transition duration-300 placeholder-slate-500",
    disabled: isVerifying
  }), /* @__PURE__ */ React.createElement("p", {
    className: "text-xs text-slate-500 text-center mt-2"
  }, "您的金鑰將會安全地儲存在您的瀏覽器中。"), /* @__PURE__ */ React.createElement("div", {
    className: "mt-6 text-center"
  }, /* @__PURE__ */ React.createElement("button", {
    type: "submit",
    disabled: !key.trim() || isVerifying,
    className: "bg-cyan-600 text-white font-bold py-3 px-8 rounded-lg hover:bg-cyan-500 disabled:bg-slate-600 disabled:cursor-not-allowed transition-all duration-300 transform hover:scale-105 active:scale-95 shadow-lg w-full md:w-auto flex items-center justify-center mx-auto"
  }, isVerifying && /* @__PURE__ */ React.createElement(LoadingIcon, null), isVerifying ? "驗證中..." : "儲存並開始"))));
};

// --- From components/HomePage.tsx ---
var HomePage = ({ saveSlots, onStartNewGame, onLoadGame, onDeleteSave }) => {
  return /* @__PURE__ */ React.createElement("div", {
    className: "bg-slate-800/50 p-8 rounded-lg shadow-2xl border border-slate-700 animate-fade-in-up backdrop-blur-sm"
  }, /* @__PURE__ */ React.createElement("h2", {
    className: "text-3xl font-bold text-cyan-300 mb-2 text-center"
  }, "冒險日誌"), /* @__PURE__ */ React.createElement("p", {
    className: "text-slate-400 mb-8 text-center"
  }, "選擇你的旅程，或開啟一段新的傳說。"), /* @__PURE__ */ React.createElement("div", {
    className: "grid grid-cols-1 md:grid-cols-2 gap-6"
  }, saveSlots.map((save, index) => /* @__PURE__ */ React.createElement("div", {
    key: index,
    className: "bg-slate-900/70 p-6 rounded-lg border border-slate-700 flex flex-col justify-between transition-shadow hover:shadow-cyan-500/20"
  }, /* @__PURE__ */ React.createElement("div", {
    className: "flex-grow"
  }, /* @__PURE__ */ React.createElement("h3", {
    className: "text-xl font-semibold text-cyan-400 mb-2"
  }, "存檔欄位 ", index + 1), save ? /* @__PURE__ */ React.createElement("div", null, /* @__PURE__ */ React.createElement("p", {
    className: "text-slate-300 break-all"
  }, /* @__PURE__ */ React.createElement("strong", null, "主題："), " ", save.theme), /* @__PURE__ */ React.createElement("p", {
    className: "text-slate-400 text-sm mt-1"
  }, /* @__PURE__ */ React.createElement("strong", null, "上次遊玩："), " ", new Date(save.timestamp).toLocaleString())) : /* @__PURE__ */ React.createElement("p", {
    className: "text-slate-500 italic"
  }, "空的欄位")), /* @__PURE__ */ React.createElement("div", {
    className: "mt-6 flex flex-col sm:flex-row gap-3"
  }, save ? /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement("button", {
    onClick: () => onLoadGame(index),
    className: "flex-1 bg-cyan-600 text-white font-bold py-2 px-4 rounded-lg hover:bg-cyan-500 transition-all duration-300 transform hover:scale-105 active:scale-95 shadow-lg text-base"
  }, "載入冒險"), /* @__PURE__ */ React.createElement("button", {
    onClick: () => onDeleteSave(index),
    className: "flex-shrink-0 bg-red-800/80 text-white font-bold p-2 rounded-lg hover:bg-red-700/80 transition-all duration-300",
    title: "刪除存檔"
  }, /* @__PURE__ */ React.createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    className: "h-5 w-5",
    viewBox: "0 0 20 20",
    fill: "currentColor"
  }, /* @__PURE__ */ React.createElement("path", {
    fillRule: "evenodd",
    d: "M9 2a1 1 0 00-.894.553L7.382 4H4a1 1 0 000 2v10a2 2 0 002 2h8a2 2 0 002-2V6a1 1 0 100-2h-3.382l-.724-1.447A1 1 0 0011 2H9zM7 8a1 1 0 012 0v6a1 1 0 11-2 0V8zm4 0a1 1 0 012 0v6a1 1 0 11-2 0V8z",
    clipRule: "evenodd"
  })))) : /* @__PURE__ */ React.createElement("button", {
    onClick: () => onStartNewGame(index),
    className: "w-full bg-slate-700/70 text-white font-bold py-2 px-4 rounded-lg hover:bg-slate-600/70 transition-all duration-300 transform hover:scale-105 active:scale-95 shadow-lg text-base"
  }, "開啟新冒險"))))));
};

// --- From App.tsx ---
var applyPlayerStateUpdate = (currentState, update) => {
  const newState = {
    ...currentState,
    attributes: { ...currentState.attributes },
    inventory: [...currentState.inventory]
  };
  if (update.setAttributes) {
    update.setAttributes.forEach((attr) => {
      const numValue = Number(attr.value);
      newState.attributes[attr.key] = isNaN(numValue) ? attr.value : numValue;
    });
  }
  if (update.addItems) {
    newState.inventory.push(...update.addItems);
  }
  if (update.removeItems) {
    const itemsToRemove = new Set(update.removeItems);
    newState.inventory = newState.inventory.filter((item) => !itemsToRemove.has(item.name));
  }
  return newState;
};
var App = () => {
  const [apiKey, setApiKey] = useState(null);
  const [gameState, setGameState] = useState(GameState.HOME);
  const [storyLog, setStoryLog] = useState([]);
  const [playerState, setPlayerState] = useState(null);
  const [currentChoices, setCurrentChoices] = useState([]);
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState(null);
  const [isGameOver, setIsGameOver] = useState(false);
  const [gameOverMessage, setGameOverMessage] = useState("");
  const [isHistoryModalOpen, setIsHistoryModalOpen] = useState(false);
  const [saveSlots, setSaveSlots] = useState([]);
  const [activeSlot, setActiveSlot] = useState(null);
  const [isVerifyingKey, setIsVerifyingKey] = useState(false);
  const [keyError, setKeyError] = useState(null);
  useEffect(() => {
    const storedKey = localStorage.getItem("gemini-api-key");
    if (storedKey) {
      setApiKey(storedKey);
    }
    setSaveSlots(getAllSaves());
  }, []);
  const resetState = useCallback((isFullReset = false) => {
    if (isFullReset) {
      setGameState(GameState.HOME);
      setSaveSlots(getAllSaves());
    }
    setStoryLog([]);
    setCurrentChoices([]);
    setPlayerState(null);
    setIsLoading(false);
    setError(null);
    setIsGameOver(false);
    setGameOverMessage("");
    setIsHistoryModalOpen(false);
    setActiveSlot(null);
  }, []);
  const handleKeySubmit = useCallback(async (key) => {
    setIsVerifyingKey(true);
    setKeyError(null);
    const isValid = await validateApiKey(key);
    setIsVerifyingKey(false);
    if (isValid) {
      localStorage.setItem("gemini-api-key", key);
      setApiKey(key);
      resetState(true);
    } else {
      setKeyError("API 金鑰無效或無法驗證。請檢查金鑰並重試。");
    }
  }, [resetState]);
  const handleChangeKey = useCallback((errorMessage) => {
    localStorage.removeItem("gemini-api-key");
    setApiKey(null);
    resetState(true);
    if (errorMessage) {
      setKeyError(errorMessage);
    }
  }, [resetState]);
  const handleStartNewGame = (slotIndex) => {
    resetState();
    setActiveSlot(slotIndex);
    setGameState(GameState.THEME_SELECTION);
  };
  const handleLoadGame = (slotIndex) => {
    const savedData = loadGame(slotIndex);
    if (savedData) {
      setStoryLog(savedData.storyLog);
      setPlayerState(savedData.playerState);
      setCurrentChoices(savedData.currentChoices);
      setIsGameOver(savedData.isGameOver);
      setGameOverMessage(savedData.gameOverMessage);
      setActiveSlot(slotIndex);
      setGameState(GameState.PLAYING);
    }
  };
  const handleDeleteSave = (slotIndex) => {
    if (window.confirm("你確定要刪除這個冒險紀錄嗎？此操作無法復原。")) {
      clearSave(slotIndex);
      setSaveSlots(getAllSaves());
    }
  };
  const handleReturnToHome = () => {
    resetState();
    setGameState(GameState.HOME);
    setSaveSlots(getAllSaves());
  };
  const handleStartGame = useCallback(async (theme) => {
    if (!apiKey || activeSlot === null) {
      setError("API 金鑰未設定或未選擇存檔欄位。");
      return;
    }
    setIsLoading(true);
    setError(null);
    clearSave(activeSlot);
    const initialPlayerState = {
      attributes: {
        "生命值": 100,
        "體力值": 100,
        "力量": 8,
        "敏捷": 8,
        "體質": 8,
        "精神": 8
      },
      inventory: []
    };
    setPlayerState(initialPlayerState);
    setStoryLog([]);
    setIsGameOver(false);
    setGameOverMessage("");
    setGameState(GameState.PLAYING);
    try {
      const initialHistory = [{ type: "theme", content: theme }];
      const response = await generateAdventureStep(initialHistory, initialPlayerState, apiKey);
      const newStoryLog = [
        ...initialHistory,
        { type: "scene", content: response.sceneDescription }
      ];
      let updatedPlayerState = initialPlayerState;
      if (response.playerStateUpdate) {
        updatedPlayerState = applyPlayerStateUpdate(initialPlayerState, response.playerStateUpdate);
      }
      setStoryLog(newStoryLog);
      setCurrentChoices(response.choices);
      setPlayerState(updatedPlayerState);
      if (response.isGameOver) {
        setIsGameOver(true);
        setGameOverMessage(response.gameOverMessage || "遊戲結束。");
      }
      saveGame({
        storyLog: newStoryLog,
        playerState: updatedPlayerState,
        currentChoices: response.choices,
        isGameOver: response.isGameOver,
        gameOverMessage: response.gameOverMessage || "",
        theme,
        timestamp: Date.now()
      }, activeSlot);
    } catch (error2) {
      console.error("Failed to start game:", error2);
      if (error2 instanceof ApiKeyError) {
        handleChangeKey("API 金鑰已失效，請提供新的金鑰。");
      } else {
        setError(error2 instanceof Error ? error2.message : "開始新遊戲時發生未知錯誤。");
        setGameState(GameState.THEME_SELECTION);
      }
    } finally {
      setIsLoading(false);
    }
  }, [apiKey, activeSlot, handleChangeKey]);
  const handleMakeChoice = useCallback(async (choiceText) => {
    if (!apiKey || activeSlot === null || !playerState) {
      setError("遊戲狀態無效，無法繼續。");
      return;
    }
    setIsLoading(true);
    setError(null);
    const newHistory = [
      ...storyLog,
      { type: "choice", content: choiceText }
    ];
    setStoryLog(newHistory);
    setCurrentChoices([]);
    try {
      const response = await generateAdventureStep(newHistory, playerState, apiKey);
      const newStoryLogWithScene = [
        ...newHistory,
        { type: "scene", content: response.sceneDescription }
      ];
      let updatedPlayerState = playerState;
      if (response.playerStateUpdate) {
        updatedPlayerState = applyPlayerStateUpdate(playerState, response.playerStateUpdate);
      }
      setStoryLog(newStoryLogWithScene);
      setCurrentChoices(response.choices);
      setPlayerState(updatedPlayerState);
      if (response.isGameOver) {
        setIsGameOver(true);
        setGameOverMessage(response.gameOverMessage || "遊戲結束。");
      }
      const theme = storyLog.find((s) => s.type === "theme")?.content;
      if (theme) {
        saveGame({
          storyLog: newStoryLogWithScene,
          playerState: updatedPlayerState,
          currentChoices: response.choices,
          isGameOver: response.isGameOver,
          gameOverMessage: response.gameOverMessage || "",
          theme,
          timestamp: Date.now()
        }, activeSlot);
      }
    } catch (error2) {
      console.error("Failed to process choice:", error2);
      if (error2 instanceof ApiKeyError) {
        handleChangeKey("API 金鑰已失效，請提供新的金鑰。");
      } else {
        setError(error2 instanceof Error ? error2.message : "處理您的選擇時發生未知錯誤。");
        setStoryLog(storyLog);
        setCurrentChoices(currentChoices);
      }
    } finally {
      setIsLoading(false);
    }
  }, [apiKey, activeSlot, playerState, storyLog, currentChoices, handleChangeKey]);
  const renderContent = () => {
    if (!apiKey) {
      return /* @__PURE__ */ React.createElement(ApiKeyInput, {
        onKeySubmit: handleKeySubmit,
        isVerifying: isVerifyingKey,
        error: keyError
      });
    }
    switch (gameState) {
      case GameState.HOME:
        return /* @__PURE__ */ React.createElement(HomePage, {
          saveSlots,
          onStartNewGame: handleStartNewGame,
          onLoadGame: handleLoadGame,
          onDeleteSave: handleDeleteSave
        });
      case GameState.THEME_SELECTION:
        return /* @__PURE__ */ React.createElement(ThemeSelector, {
          onStart: handleStartGame,
          isLoading
        });
      case GameState.PLAYING:
        return /* @__PURE__ */ React.createElement(GameScreen, {
          storyLog,
          choices: currentChoices,
          playerState,
          isLoading,
          isGameOver,
          gameOverMessage,
          error,
          onMakeChoice: handleMakeChoice,
          onRestart: handleReturnToHome,
          onOpenHistory: () => setIsHistoryModalOpen(true)
        });
      default:
        return /* @__PURE__ */ React.createElement("p", null, "未知的遊戲狀態。");
    }
  };
  return /* @__PURE__ */ React.createElement("main", {
    className: "container mx-auto p-4 md:p-8 text-slate-200 relative min-h-screen"
  }, /* @__PURE__ */ React.createElement("div", {
    className: "absolute top-4 right-4 md:top-8 md:right-8 z-10 flex items-center gap-4"
  }, apiKey && gameState !== GameState.HOME && /* @__PURE__ */ React.createElement("div", {
    className: "relative group flex items-center"
  }, /* @__PURE__ */ React.createElement("button", {
    onClick: handleReturnToHome,
    "aria-label": "返回主選單",
    className: "bg-slate-700/80 text-slate-300 p-2 rounded-full hover:bg-slate-600/90 transition-all duration-300 shadow-md backdrop-blur-sm border border-slate-600"
  }, /* @__PURE__ */ React.createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    className: "h-6 w-6",
    fill: "none",
    viewBox: "0 0 24 24",
    stroke: "currentColor",
    strokeWidth: 2
  }, /* @__PURE__ */ React.createElement("path", {
    strokeLinecap: "round",
    strokeLinejoin: "round",
    d: "M3 12l2-2m0 0l7-7 7 7M5 10v10a1 1 0 001 1h3m10-11l2 2m-2-2v10a1 1 0 01-1 1h-3m-6 0a1 1 0 001-1v-4a1 1 0 011-1h2a1 1 0 011 1v4a1 1 0 001 1m-6 0h6"
  }))), /* @__PURE__ */ React.createElement("span", {
    className: "absolute right-full mr-3 px-2 py-1 bg-slate-900 text-white text-xs rounded-md shadow-lg opacity-0 group-hover:opacity-100 transition-opacity duration-300 pointer-events-none whitespace-nowrap"
  }, "返回主選單")), apiKey && /* @__PURE__ */ React.createElement("div", {
    className: "relative group flex items-center"
  }, /* @__PURE__ */ React.createElement("button", {
    onClick: () => handleChangeKey(),
    "aria-label": "更換 API 金鑰",
    className: "bg-slate-700/80 text-slate-300 p-2 rounded-full hover:bg-slate-600/90 transition-all duration-300 shadow-md backdrop-blur-sm border border-slate-600"
  }, /* @__PURE__ */ React.createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    className: "h-6 w-6",
    fill: "none",
    viewBox: "0 0 24 24",
    stroke: "currentColor",
    strokeWidth: 2
  }, /* @__PURE__ */ React.createElement("path", {
    strokeLinecap: "round",
    strokeLinejoin: "round",
    d: "M15 7a2 2 0 012 2m4 0a6 6 0 01-7.743 5.743L11 17H9v2H7v2H4a1 1 0 01-1-1v-2.586a1 1 0 01.293-.707l5.964-5.964A6 6 0 0121 7z"
  }))), /* @__PURE__ */ React.createElement("span", {
    className: "absolute right-full mr-3 px-2 py-1 bg-slate-900 text-white text-xs rounded-md shadow-lg opacity-0 group-hover:opacity-100 transition-opacity duration-300 pointer-events-none whitespace-nowrap"
  }, "更換 API 金鑰"))), /* @__PURE__ */ React.createElement("header", {
    className: "text-center mb-8 pt-16 md:pt-0"
  }, /* @__PURE__ */ React.createElement("h1", {
    className: "text-4xl md:text-5xl font-bold text-cyan-300 drop-shadow-[0_2px_2px_rgba(0,0,0,0.5)]"
  }, "Gemini 冒險紀元")), renderContent(), /* @__PURE__ */ React.createElement(HistoryModal, {
    isOpen: isHistoryModalOpen,
    onClose: () => setIsHistoryModalOpen(false),
    storyLog
  }));
};

// --- From index.tsx (entry point) ---
var rootElement = document.getElementById("root");
if (!rootElement) {
  throw new Error("Could not find root element to mount to");
}
var root = ReactDOM.createRoot(rootElement);
root.render(/* @__PURE__ */ React.createElement(React.StrictMode, null, /* @__PURE__ */ React.createElement(App, null)));
